))
}else if remove_bool_col = TRUE {
df %>% mutate(!!col2 := case_when(
!!col == TRUE ~ 1,
!!col == FALSE ~ 0
))
df %>% select(-!!col1)
}
}
if(remove_bool_col = FALSE) {
df %>% mutate(!!col2 := case_when(
!!col == TRUE ~ 1,
!!col == FALSE ~ 0
))
} else if(remove_bool_col = TRUE) {
df %>% mutate(!!col2 := case_when(
!!col == TRUE ~ 1,
!!col == FALSE ~ 0
))
df %>% select(-!!col1)
}
bool_to_binary <- function(df,col,remove_bool_col = FALSE){
col <- enquo(col)
col2 <- paste0(quo_name(col),"_Binary")
if(remove_bool_col = FALSE) {
df %>% mutate(!!col2 := case_when(
!!col == TRUE ~ 1,
!!col == FALSE ~ 0
))
} else if(remove_bool_col = TRUE) {
df %>% mutate(!!col2 := case_when(
!!col == TRUE ~ 1,
!!col == FALSE ~ 0
))
df %>% select(-!!col1)
}
}
bool_to_binary <- function(df,col,remove_bool_col = FALSE){
col <- enquo(col)
col2 <- paste0(quo_name(col),"_Binary")
if(remove_bool_col == FALSE) {
df %>% mutate(!!col2 := case_when(
!!col == TRUE ~ 1,
!!col == FALSE ~ 0
))
} else if(remove_bool_col == TRUE) {
df %>% mutate(!!col2 := case_when(
!!col == TRUE ~ 1,
!!col == FALSE ~ 0
))
df %>% select(-!!col1)
}
}
iris %>% mutate(Setosa = str_detect(.$Species, "setosa")) %>% bool_to_binary(.,Setosa)
iris %>% mutate(Setosa = str_detect(.$Species, "setosa")) %>% bool_to_binary(.,Setosa,TRUE)
df %>% select(-!!col)
iris %>% mutate(Setosa = str_detect(.$Species, "setosa")) %>% bool_to_binary(.,Setosa,TRUE)
col2 <- paste0(quo_name(col),"_Binary")
bool_to_binary <- function(df,col,remove_bool_col = FALSE){
col <- enquo(col)
col2 <- paste0(quo_name(col),"_Binary")
if(remove_bool_col == FALSE) {
df %>% mutate(!!col2 := case_when(
!!col == TRUE ~ 1,
!!col == FALSE ~ 0
))
} else if(remove_bool_col == TRUE) {
df %>% mutate(!!col2 := case_when(
!!col == TRUE ~ 1,
!!col == FALSE ~ 0
))
df %>% select(-!!col)
}
}
iris %>% mutate(Setosa = str_detect(.$Species, "setosa")) %>% bool_to_binary(.,Setosa,TRUE)
iris %>% mutate(Setosa = str_detect(.$Species, "setosa")) %>% bool_to_binary(.,Setosa)
bool_to_binary <- function(df,col,remove_bool_col = FALSE){
col <- enquo(col)
col2 <- paste0(quo_name(col),"_Binary")
if(remove_bool_col == FALSE) {
df %>% mutate(!!col2 := case_when(
!!col == TRUE ~ 1,
!!col == FALSE ~ 0
))
} else if(remove_bool_col == TRUE) {
df <- df %>% mutate(!!col2 := case_when(
!!col == TRUE ~ 1,
!!col == FALSE ~ 0
))
df %>% select(-!!col)
}
}
iris %>% mutate(Setosa = str_detect(.$Species, "setosa")) %>% bool_to_binary(.,Setosa,TRUE)
mtcars %>% select(cyl) %>% lag_col(cyl,0) #%>% lead_col(cyl,0)
setwd("~/Documents/GitHub/tibbleColumns")
document()
library(devtools)
document()
library(devtools)
install_github("nhemerson/tibbleColumns")
library(tibbleColumns)
install_github("nhemerson/tibbleColumns")
library(devtools)
install_github("nhemerson/tibbleColumns")
library(tibbleColumns)
setwd("~/Documents/GitHub/tibbleColumns")
document()
library(devtools)
install_github("nhemerson/tibbleColumns")
library(tibbleColumns)
iris %>% mutate(Setosa = str_detect(.$Species, "setosa")) %>% bool_to_binary(.,Setosa,TRUE)
library(tidyverse)
iris %>% mutate(Setosa = str_detect(.$Species, "setosa")) %>% bool_to_binary(.,Setosa,TRUE)
library(gapminder)
install.packages("gapminder")
library(gapminder)
install.packages("fivethirtyeight")
library(fivethirtyeight)
prop_column <- function(df, col) {
col <- enquo(col)
prop_col <- paste0("Perc_", quo_name(col))
df %>% mutate(!!prop_col := round((!!col)/(sum(!!col))*100,3))
}
mtcars %>% count(cyl, disp) %>% arrange(desc(n)) %>% prop_column(n)
mtcars %>% tbl_out("cars") #%>% tbl_module(filter(.,hp > 150),"fastCars") %>% tbl_lookup(cyl) %>% tbl_out("cylList")
mtcars %>% tbl_out("cars2") #%>% tbl_module(filter(.,hp > 150),"fastCars") %>% tbl_lookup(cyl) %>% tbl_out("cylList")
mtcars %>% tbl_out("cars") %>% tbl_module(filter(.,hp > 150),"fastCars") %>% tbl_lookup(cyl) %>% tbl_out("cylList")
mtcars %>% tbl_out("cars") #%>% tbl_module(filter(.,hp > 150),"fastCars") %>% tbl_lookup(cyl) %>% tbl_out("cylList")
cars <- mtcars #%>% tbl_out("cars") #%>% tbl_module(filter(.,hp > 150),"fastCars") %>% tbl_lookup(cyl) %>% tbl_out("cylList")
View(cars)
library(tidyverse)
library(gapminder)
gapminder
# Base R
asia <- gapminder[gapminder$continent == "Asia", ]
mean(asia$lifeExp)
library(gapminder); library(dplyr)
gap_2007 <- gapminder %>% filter(year == 2007)
gap_2007
library(tidyverse)
library(readxl)
movies_from_excel <- read_excel("data/movies.xlsx", sheet = 1)
movies_from_excel
getwd
getwd()
library(readxl)
movies_from_excel <- read_excel("movies.xlsx", sheet = 1)
movies_from_excel <- read_excel("data/movies.xlsx", sheet = 1)
file_choose <- function(type){
raw <- file.choose()
if(type == "csv"){
data <- read_csv(raw)
}
}
file_choose("csv")
file_choose <- function(type){
raw <- file.choose()
if(type == "csv"){
data <- read_csv(raw)
} if else(type == "xls"){
data <- read_excel(raw)
}
}
file_choose <- function(type){
raw <- file.choose()
if(type == "csv"){
data <- read_csv(raw)
} if else(type == "xls"){
data <- read_excel(raw)
}
}
file_choose("xls")
file_choose <- function(type){
raw <- file.choose()
if(type == "csv"){
data <- read_csv(raw)
data
} if else(type == "xls"){
data <- read_excel(raw)
data
}
}
file_choose("xls")
file_choose <- function(type){
raw <- file.choose()
if(type == "csv"){
data <- read_csv(raw)
data
} if else(type == "xls"){
data <- read_excel(raw)
data
}
}
file_choose <- function(type){
raw <- file.choose()
if(type == "csv"){
data <- read_csv(raw)
data
} else if(type == "xls"){
data <- read_excel(raw)
data
}
}
file_choose("xls")
file_choose("csv")
file_choose("csv") %>% tbl_out("data")
raw <- file.choose()
data <- read_csv(raw)
file_choose <- function(type){
raw <- file.choose()
if(type == "csv"){
data <- read_csv(raw)
data
} else if(type == "xls"){
data <- read_excel(raw)
data
} else{
print("Incorrect file format. Choose either csv or xls")
}
}
file_choose("dskjhf")
file_choose <- function(type){
if(type != "csv" | type != "xls"){
print("Not an approved format. type Please use csv or xls")
} else{
raw <- file.choose()
if(type == "csv"){
data <- read_csv(raw)
data
} else if(type == "xls"){
data <- read_excel(raw)
data
}
}
}
file_choose()
file_choose("chd")
file_choose <- function(type){
if(type != "csv" | type != "xls"){
print("Not an approved format type. Please use csv or xls")
} else{
raw <- file.choose()
if(type == "csv"){
data <- read_csv(raw)
data
} else if(type == "xls"){
data <- read_excel(raw)
data
}
}
}
file_choose("csf")
file_choose("csv")
file_choose("xls")
file_choose("csv")
file_choose <- function(type){
if(type != "csv"){
print("Not an approved format type. Please use csv or xls")
} else{
raw <- file.choose()
if(type == "csv"){
data <- read_csv(raw)
data
} else if(type == "xls"){
data <- read_excel(raw)
data
}
}
}
file_choose("csv")
file_choose("xls")
file_choose <- function(type){
if(type != "csv" & type != "xls"){
print("Not an approved format type. Please use csv or xls")
} else{
raw <- file.choose()
if(type == "csv"){
data <- read_csv(raw)
data
} else if(type == "xls"){
data <- read_excel(raw)
data
}
}
}
file_choose("cds")
file_choose("csv")
file_choose("xls")
file_choose("csv")
file_choose <- function(type, sheet = NULL){
if(type != "csv" & type != "xls"){
print("Not an approved format type. Please use csv or xls")
} else if(type == "xls" && !is.null(sheet)){
raw <- file.choose()
data <- read_excel(raw, sheet = sheet)
data
} else if(type == "csv"){
data <- read_csv(raw)
data
}
}
file_choose("sadfasd")
file_choose("xls")
file_choose <- function(type, sheet = NULL){
if(type != "csv" & type != "xls"){
print("Not an approved format type. Please use csv or xls")
} else if(type == "xls"){
raw <- file.choose()
data <- read_excel(raw, sheet = sheet)
data
} else if(type == "csv"){
raw <- file.choose()
data <- read_csv(raw)
data
}
}
file_choose("Csv")
file_choose("csv")
file_choose("xls")
file_choose("xls", sheet = 1)
setwd("~/Documents/GitHub/tibbleColumns")
document()
library(devtools)
document()
library(stringr)
mtcars %>% str_detect(cyl,",")
cars <- mtcars %>% tbl_df()
cars %>% str_detect(cyl,",")
cars %>% str_detect(cars$cyl,",")
oxfordComma <- "This should have an oxford comma and it doesn't"
str_detect(oxfordComma,",")
commTest <- function(string){
if(str_detect(string,",") == FALSE){
print("this should have a commma")
}
}
commTest(oxfordComma)
document()
library(devtools)
install_github("nhemerson/tibbleColumns")
library(tibbleColumns)
cars <- data.frame(mtcars)
carsTib <- data_frame(mtcars)
cars <- data.frame(mtcars)
carsTib <- tbl_df(mtcars)
library(tidyverse)
carsTib <- data_frame(mtcars)
cars <- data.frame(mtcars)
cars
carsTib <- data_frame(mtcars)
carsTib <- as_data_frame(mtcars)
cars <- as.data.frame(mtcars)
carsTib <- as_data_frame(mtcars)
cars
carsTib
test <- mtcars %>% select(cyl)
test
test <- mtcars %>% select(cyl) %>% tbl_df()
test
library(bigrquery)
library(googleAuthR)
library(tidyverse)
library(qcAnalyticsBigQuery)
library(tibbleColumns)
library(stringr)
library(ggplot2)
library(purrr)
library(zoo)
#query elastic data
query <- "SELECT
BrowserSession.BrowserSessionId,
ClientAction.ClientActionSourceCreateDt,
Associate.HomeDepotUserId,
Associate.FullNm,
ClientAction.ActiveListId,
BrowserSession.LocationNbr,
ClientAction.ClientActionTypeNm,
ClientAction.SearchClientAction.SearchTermTxt,
searchResults.ProductId,
searchResults.ProductNm,
ClientAction.AddToListClientAction.AddtoListProduct.ProductId addedProId,
ClientAction.AddToListClientAction.AddtoListProduct.ProductNm addedProd,
ClientAction.AddToListClientAction.AddtoListProduct.ProductSourceDisplayNm
FROM
QA_Opportunity.ElasticSearchClientAction
LEFT OUTER JOIN UNNEST(ClientAction.SearchSuccessProduct) searchResults
WHERE ClientAction.ClientActionSourceCreateDt >= '2018-05-26'"
#project designation
project <- "analytics-quotecenter-prod"
#Query GBC data and then save as csv for reloading purposes
esBGMD <- hd_bq_query(query,project) %>% tbl_df()
library(tibbleColumns)
esBGMD %>% group_by(ClientActionTypeNm) %>% count()
View(esBGMD)
esBGMD %>% group_by(ClientActionSourceCreateDt,ClientActionTypeNm) %>% count()
esBGMD %>% modify_at("ClientActionSourceCreateDt",as.Date) %>% group_by(ClientActionSourceCreateDt,ClientActionTypeNm) %>% count()
esBGMD %>% modify_at("ClientActionSourceCreateDt",as.Date) %>% group_by(ClientActionSourceCreateDt,ClientActionTypeNm) %>% count() %>% tbl_out("dayTrend")
View(dayTrend)
dayTrend %>% filter(ClientActionTypeNm == str_detect("AND"))
dayTrend %>% filter(ClientActionTypeNm == str_detect(.$ClientActionTypeNm,"AND"))
dayTrend %>% filter(ClientActionTypeNm == str_detect(.$ClientActionTypeNm,"ADD"))
dayTrend %>% filter(str_detect(.$ClientActionTypeNm,"ADD"))
dayTrend %>% filter(str_detect(.$ClientActionTypeNm,"ADD")) %>% tbl_out("addTrend")
View(addTrend)
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, group = ClientActionTypeNm))
p + geom_line()
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, color = ClientActionTypeNm))
p + geom_line()
#query elastic data
query <- "SELECT
BrowserSession.BrowserSessionId,
ClientAction.ClientActionSourceCreateDt,
Associate.HomeDepotUserId,
Associate.FullNm,
ClientAction.ActiveListId,
BrowserSession.LocationNbr,
ClientAction.ClientActionTypeNm,
ClientAction.SearchClientAction.SearchTermTxt,
searchResults.ProductId,
searchResults.ProductNm,
ClientAction.AddToListClientAction.AddtoListProduct.ProductId addedProId,
ClientAction.AddToListClientAction.AddtoListProduct.ProductNm addedProd,
ClientAction.AddToListClientAction.AddtoListProduct.ProductSourceDisplayNm
FROM
QA_Opportunity.ElasticSearchClientAction
LEFT OUTER JOIN UNNEST(ClientAction.SearchSuccessProduct) searchResults
WHERE ClientAction.ClientActionSourceCreateDt >= '2018-05-01'"
#Query GBC data and then save as csv for reloading purposes
esBGMD <- hd_bq_query(query,project) %>% tbl_df()
query <- "SELECT
ClientAction.ClientActionSourceCreateDt,
ClientAction.ClientActionTypeNm
FROM
PR_Opportunity.ElasticSearchClientAction
WHERE ClientAction.ClientActionSourceCreateDt >= '2018-05-01'
AND ClientAction.ClientActionTypeNm like 'ADD%'"
#project designation
project <- "analytics-quotecenter-prod"
#Query GBC data and then save as csv for reloading purposes
esBGMD <- hd_bq_query(query,project) %>% tbl_df()
esBGMD %>% modify_at("ClientActionSourceCreateDt",as.Date) %>% group_by(ClientActionSourceCreateDt,ClientActionTypeNm) %>% count() %>% tbl_out("dayTrend")
dayTrend %>% filter(str_detect(.$ClientActionTypeNm,"ADD")) %>% tbl_out("addTrend")
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, color = ClientActionTypeNm))
p + geom_line()
query <- "SELECT
ClientAction.ClientActionSourceCreateDt,
ClientAction.ClientActionTypeNm
FROM
QA_Opportunity.ElasticSearchClientAction
WHERE ClientAction.ClientActionSourceCreateDt >= '2018-05-01'
AND ClientAction.ClientActionTypeNm like 'ADD%'"
#project designation
project <- "analytics-quotecenter-prod"
#Query GBC data and then save as csv for reloading purposes
esBGMD <- hd_bq_query(query,project) %>% tbl_df()
esBGMD %>% modify_at("ClientActionSourceCreateDt",as.Date) %>% group_by(ClientActionSourceCreateDt,ClientActionTypeNm) %>% count() %>% tbl_out("dayTrend")
dayTrend %>% filter(str_detect(.$ClientActionTypeNm,"ADD")) %>% tbl_out("addTrend")
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, color = ClientActionTypeNm))
p + geom_line()
dayTrend %>% filter(str_detect(.$ClientActionTypeNm,"ADD")) %>% mutate(CleanName = case_when(
ClientActionTypeNm == "ADD_CATALOG_PURCHASE_TEIM_TO_ACTIVE_LIST" ~ "Prodcut Add",
ClientActionTypeNm == "ADD_SCANNED_ITEM_TO_ACTIVE_LIST_REQUEST_SUCCESS" ~ "Scan Gun Add",
ClientActionTypeNm == "ADD_SKU_ITEM_TO_ACTIVE_LIST_REQUEST_SUCCESS" ~ "Manual Sku Add"
))  %>% tbl_out("addTrend")
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, color = ClientActionTypeNm))
p + geom_line()
p <- ggplot(addTrend, aes(CleanName, n, color = ClientActionTypeNm))
p + geom_line()
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, color = CleanName))
p + geom_line()
dayTrend %>% filter(str_detect(.$ClientActionTypeNm,"ADD")) %>% mutate(CleanName = case_when(
ClientActionTypeNm == "ADD_CATALOG_PURCHASE_ITEM_TO_ACTIVE_LIST" ~ "Prodcut Add",
ClientActionTypeNm == "ADD_SCANNED_ITEM_TO_ACTIVE_LIST_REQUEST_SUCCESS" ~ "Scan Gun Add",
ClientActionTypeNm == "ADD_SKU_ITEM_TO_ACTIVE_LIST_REQUEST_SUCCESS" ~ "Manual Sku Add"
))  %>% tbl_out("addTrend")
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, color = CleanName))
p + geom_line()
library(slackr)
library(dplyr)
library(ggplot2)
library(DT)
#slackrSetup(config_file = "~/.slackr")
slackr_setup(channel = "#analytics_test_", username = "slackr", icon_emoji = "",
incoming_webhook_url = "https://hooks.slack.com/services/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", api_token = "xoxp-2152006730-210609210274-371572680705-b56f36bdeae716bd51e03e2a98b04b92", config_file = "~/.slackr",
echo = FALSE)
slackr::slackr(p + geom_line(), channel = "@hoytemerson")
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, color = CleanName)) + geom_line()
slackr::slackr(p, channel = "@hoytemerson")
slackr::slackr(p)
slackr::ggslackr(p)
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, color = CleanName)) + geom_line() + labs(title = "Product Add Mix for May")
p + geom_line()
??labs
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, color = CleanName)) + geom_line() + labs(title = "Product Add Mix for May", xlab = "Date", ylab = "Count")
p
??labs
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, color = CleanName)) + geom_line() + labs(title = "Product Add Mix for May", x = "Date", y = "Count")
p
slackr::ggslackr(p, channel = "#analytics_big_ideas")
slackr::ggslackr(p, channel = "analytics_big_ideas")
slackr::ggslackr(p, channel = "analytics-big-ideas")
p <- ggplot(addTrend, aes(ClientActionSourceCreateDt, n, color = CleanName)) + geom_line() + labs(title = "QC2 Product Add Mix for May", x = "Date", y = "Count")
slackr::ggslackr(p, channel = "analytics-big-ideas")
73165/525419
122067/151201
139968/847526
164132/847526
164132 + 548375
183808/265946
183808/265946
setwd("~/Documents/GitHub/tibbleColumns")
devtools::use_vignette("my-vignette")
